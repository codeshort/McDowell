#include <iostream>
#include <queue>
using namespace std;
class Node
{
    public:
    int val;
    Node* left;
    Node* right;
   
    Node* adding(int * arr, int start, int end)
    {
        if( start>end)
        {
            return NULL;
        }
        Node* root = new Node();
        int mid = (start+end)/2;
        cout<<" added "<<arr[mid]<<endl;
        root->val = arr[mid];
        if(mid-1>=start)
        {
            root->left= adding(arr,start,mid-1);
        }
       if(mid+1<=end)
        {
        
            root->right= adding(arr,mid+1,end);
        }
        cout<<"******************************"<<endl;
        return root;
        
    }
};
int main()
{
    Node n;
    int arr[17] = {2, 4 , 8, 10, 14 ,17 ,18, 24, 27 , 30, 46, 78, 80 , 100 , 201, 246, 300};
    Node *root = n.adding(arr, 0,16);
    bool visited[305];
    queue<Node*> q, q1;
    for(int i=0;i<305;i++)
    {
        visited[i] = false;
    }
    q.push(root);
    while(!q.empty() || !q1.empty())
    {
       if(!q.empty())
       {
           while(!q.empty())
           {
               Node* top = q.front();
               if(top->left != NULL && visited[top->left->val]== false)
               q1.push(top->left);
               if(top->right != NULL && visited[top->right->val]== false)
               q1.push(top->right);
               visited[top->val] = true;
               cout<<top->val<<" ";
               //visited[top->val] =  true;
               q.pop();
           }
           cout<<"***********************************\n";
       }
       
       else if(!q1.empty())
       {
           while(!q1.empty())
           {
               Node* top = q1.front();
               if(top->left != NULL && visited[top->left->val]== false)
               q.push(top->left);
               if(top->right != NULL && visited[top->right->val]== false)
               q.push(top->right );
               visited[top->val] = true;
                cout<<top->val<<" ";
               //visited[top->val] =  true;
               q1.pop();
               
           }
            cout<<"##################################################\n";
       }
       
    }
    
    return 0;
}
